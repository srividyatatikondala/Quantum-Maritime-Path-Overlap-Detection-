| **Phase**                            | **Step / Purpose**                                       | **Registers Used**          | **Quantum Gates / Operations**           | **Effect on State**                                                                           | **Rationale / Description**                                                                                                       |                                                                                                                                      |       |       |                                                                                                                     |
| ------------------------------------ | -------------------------------------------------------- | --------------------------- | ---------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ | ----- | ----- | ------------------------------------------------------------------------------------------------------------------- |
| **1️⃣ Initialization**               | Define number of ships and lanes, create qubit registers | `ship_regs`, `ancilla`, `F` | —                                        | Qubits initialized to `                                                                       | 0⟩`                                                                                                                               | Each ship’s position is represented as a group of qubits (one per lane). Ancilla and flag qubits are reserved for overlap detection. |       |       |                                                                                                                     |
| **2️⃣ Superposition Creation**       | Enable all ships to occupy multiple lanes simultaneously | `ship_regs`                 | `Hadamard (H)`                           | Ships’ lane states become superposed (`                                                       | 00⟩ +                                                                                                                             | 01⟩ +                                                                                                                                | 10⟩ + | 11⟩`) | Simulates all possible lane assignments for every ship at once — representing real-world possibilities in parallel. |
| **3️⃣ Oracle (Collision Detection)** | Detect if any two ships share the same lane              | `ship_regs`, `ancilla`, `F` | `CCX (Toffoli)`, `MCX (multi-control X)` | Flips ancilla if two ships occupy the same lane; flips final `F` flag if any overlap detected | Encodes the collision logic: “If any pair of ships are in the same lane → set F=1”. This is the **core quantum detection logic**. |                                                                                                                                      |       |       |                                                                                                                     |
| **4️⃣ Uncomputation (Cleanup)**      | Revert ancilla states to avoid entanglement              | `ancilla`, `ship_regs`      | `CCX (Toffoli)` (in reverse)             | Ancillas reset to `                                                                           | 0⟩`, only `F` retains result                                                                                                      | Ensures that the final measurement reflects only the collision flag — leaving no leftover entanglement.                              |       |       |                                                                                                                     |
| **5️⃣ Measurement & Visualization**  | Observe final flag and visualize probability             | `F`                         | `Measure`, `Matplotlib`, `Folium`        | Collapsed classical bit (F=1 → collision detected)                                            | Results displayed as both bar chart (probabilities) and map (ships + collision risk).                                             |                                                                                                                                      |       |       |                                                                                                                     |
